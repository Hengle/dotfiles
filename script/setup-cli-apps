#!/usr/bin/env bash
set +e
proceed=1
result=0

DOTFILES_ROOT="$HOME/.dotfiles"
LOGFILE=/tmp/dotfiles-setup

. $DOTFILES_ROOT/script/shared-functions

echo "Running in $0 ${BASH_VERSION}" >> $LOGFILE

# ensure we capture unexpected exits
trap exit_warning EXIT

while :; do
  case $1 in
    -h|--help) showhelp=1
    ;;
    *) break
  esac
  shift
done

install_homebrew() {
  check "homebrew" "command -v brew"
  if [[ "$(uname)" == "Darwin" ]]; then
    successfully 'echo | ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"'
  elif [[ "$(expr substr $(uname -s) 1 5)" == "Linux" ]]; then
    if [[ $proceed -ne 0 ]]; then
      status "homebrew : ${BOLD}installing dependencies...${NORMAL}"
      successfully "sudo apt-get update && sudo apt-get -y install build-essential curl file git ruby" >> $LOGFILE 2>&1;
      info "homebrew"
      status "homebrew : ${BOLD}installing${NORMAL}"
      successfully 'echo | sh -c "$(curl -fsSL https://raw.githubusercontent.com/Linuxbrew/install/master/install.sh)"'
      info "homebrew" "environment ready"
      status "homebrew : ${BOLD}environment setup${NORMAL}"
      successfully 'test -d ~/.linuxbrew && eval $(~/.linuxbrew/bin/brew shellenv);test -d /home/linuxbrew/.linuxbrew && eval $(/home/linuxbrew/.linuxbrew/bin/brew shellenv);test -r ~/.bash_profile && echo "eval \$($(brew --prefix)/bin/brew shellenv)" >>~/.bash_profile;echo "eval \$($(brew --prefix)/bin/brew shellenv)" >>~/.profile;echo "eval \$($(brew --prefix)/bin/brew shellenv)" >>~/.localrc;sudo mkdir -p /home/linuxbrew/.linuxbrew/var/homebrew/linked;sudo chown -R $(whoami) /home/linuxbrew/.linuxbrew/var/homebrew/linked'
    fi
  fi
}

if [[ $bootstrapping -ne 1 ]]; then
  header "Let's install some interesting cli apps ..."

  ask_sudo_password

  notice_left "\nFeel free to follow the details by running:"
  notice_left "${BOLD} tail -f $LOGFILE ${NORMAL}in another terminal\n"
fi

message=""

_title_ "First some base stuff we just need:"
install_homebrew

check "node / npm" "command -v npm"
  successfully "brew install npm"

check "python 2.x" "brew ls --versions python@2"
  successfully "brew install python@2"

check "python 3.x" "brew ls --versions python@3"
  successfully "brew install python"

notice_left "\nNow the interesting things..."

## GENERAL DEVELOPMENT TOOLS ##

_title_ "Development Tools:"

check "httpie (a user-friendly http client)" "command -v http"
  successfully "brew install httpie"

check "jq (json processor)" "command -v jq"
  successfully "brew install jq"

check "fx (json processor)" "command -v fx"
  successfully "brew install fx"

check "howdoi (check stackoverflow)" "command -v howdoi"
  successfully "pip install howdoi"

check "tldr (summarized command help)" "command -v tldr"
  successfully "npm install -g tldr"

check "mklicense (cli tool for generating licenses)" "command -v mklicense"
  successfully "npm install -g mklicense"

check "dockly (managing Docker containers)" "command -v dockly"
  successfully "npm install -g dockly"

check "serve (easy to use static file server)" "command -v serve"
  successfully "npm install -g serve"

check "add-gitignore (generates a .gitignore for your project)" "command -v add-gitignore"
  successfully "npm install -g add-gitignore"

check "carbon-now (beautiful images of your code)" "command -v carbon-now"
  successfully "npm i -g carbon-now-cli"

check "bat (a cat clone with wings)" "command -v bat"
  successfully "brew install bat"

check "ag (lightning-fast code search)" "command -v ag"
  successfully "brew install the_silver_searcher"

check "nnn (lightning fast, feature-packed file manager)" "command -v nnn"
  successfully "brew install nnn"

## FRONTEND DEVELOPMENT TOOLS ##

_title_ "Frontend Development:"

check "caniuse (check caniuse.com)" "command -v caniuse"
  successfully "npm install -g caniuse-cmd"

check "pageres (capture screenshots of websites)" "command -v pageres"
  successfully "npm install -g pageres-cli"

check "capture-website (capture screenshots of websites)" "command -v capture-website"
  successfully "npm install -g capture-website-cli"

check "imgp (blazing fast image resizer and rotator)" "command -v imgp"
  successfully "pip3 install pillow"

check "chrunch (the best png size crusher)" "command -v crunch"
  successfully "brew install crunch"

check "imageoptim-cli (CLI for ImageOptim, ImageAlpha and JPEGmini)" "command -v imageoptim"
  successfully "npm install -g imageoptim-cli"

## MOBILE DEVELOPMENT ##

_title_ "Mobile Development:"

check "mobicon (mobile app icon generator)" "command -v mobicon"
  successfully "npm install -g mobicon-cli"

check "mobisplash (mobile app splash screen generator)" "command -v mobisplash"
  successfully "npm install -g mobisplash-cli"

check "dframe (put device frames around app screenshots)" "command -v dframe"
  successfully "npm install -g deviceframe"

check "viewport-list (list of devices and their viewports)" "command -v viewport-list"
  successfully "npm install -g viewport-list-cli"

## BACKEND DEVELOPMENT ##

_title_ "Backend Development:"

check "aws (universal cli for amazon web services)" "command -v aws"
  successfully "pip install awscli"

check "s3cmd (fully-featured s3 client)" "command -v s3cmd"
  successfully "pip install s3cmd"

check "loadtest (run a load test on the selected url)" "command -v loadtest"
  successfully "npm install -g loadtest"

check "speedtest-net (test your internet speed)" "command -v speedtest-net"
  successfully "npm install -g speedtest-net"

check "fast-cli (test your internet speed using fast.com)" "command -v fast"
  successfully "npm install -g fast-cli"

check "pretty-ms (convert milliseconds to a human readable string)" "command -v pretty-ms"
  successfully "npm install -g pretty-ms-cli  "

## GIT TOOLS ##

_title_ "Git Things:"

check "hub (tool that wraps git)" "command -v hub"
  successfully "brew install hub"

check "git-secret (stores private data inside a git repo)" "brew ls --versions git-secret"
  successfully "brew install git-secret"

check "git-extras (repo summary, repl, changelog, commit percentages, etc.)" "brew ls --versions git-extras"
  successfully "brew install git-extras"

## CONVENIENCE TOOLS ##

_title_ "Convenience Stuff:"

check "fkill (fabulously kill processes)" "command -v fkill"
  successfully "npm install -g fkill-cli"

check "colorls (colorized ls command)" "gem list colorls | grep colorls"
  successfully "gem install colorls"

check "gfi (google font installer)" "command -v gfi"
  successfully "npm install -g google-font-installer"

check "fuck (autocorrects error in previous command)" "command -v fuck"
  successfully "brew install thefuck"

check "undollar (undollar strips the dollar sign from copy/pasted commands)" "command -v $"
  successfully "npm install -g undollar"

check "kill-tabs (kill all Chrome tabs to improve performance)" "command -v kill-tabs"
  successfully "npm install -g kill-tabs"

check "autojump (cd command that learns where you went)" "command -v autojump"
  successfully "brew install autojump"

## INFORMATION / NEWS TOOLS ##

_title_ "Information & Search:"

check "bitly-client (make and manage bitly/zenjoy.me shortlinks)" "command -v bitly-client"
  successfully "npm install -g bitly-client"

check "haxor-news (hacker news reader)" "command -v hn"
  successfully "pip install haxor-news"

check "googler (google cli)" "command -v googler"
  successfully "brew install googler"

check "is-up (check website via isitup.org)" "command -v is-up"
  successfully "npm install -g is-up-cli"

## DEVOPS STUFF ##

_title_ "DevOps Stuff:"

check "agrind (slice and dice log files on the command line)" "command -v agrind"
  successfully "brew install angle-grinder"

## MANAGE YOUR MAC ##

_title_ "OSX Management / Helpers:"

check "m-cli (swiss army knife for macOS)" "command -v m"
  successfully "brew install m-cli"

check "mas-cli (command line interface for the Mac App Store)" "command -v mas"
  successfully "brew install mas"

check "brightness (manage screen brightness)" "command -v brightness"
  successfully "npm install -g brightness-cli"

check "volume (manage volume)" "command -v volume"
  successfully "npm install -g gillstrom/vol-cli"

check "battery-level (get battery level)" "command -v battery-level"
  successfully "npm install -g battery-level-cli"

check "screensaver (start screensaver)" "command -v screensaver"
  successfully "npm install -g screensaver"

check "organize (auto organize files based on file type)" "command -v organize"
  successfully "npm install -g organize-cli"

check "rename (utility for renaming files)" "command -v rename"
  successfully "npm install -g rename-cli"

check "trash (move files and folders to the trash)" "command -v trash"
  successfully "npm install -g trash-cli"

check "empty-trash (empty the trash)" "command -v empty-trash"
  successfully "npm install -g empty-trash-cli"

check "public-ip (get your public ip address)" "command -v public-ip"
  successfully "npm install -g public-ip-cli"

check "wallpaper (get or set your wallpaper)" "command -v wallpaper"
  successfully "npm install -g wallpaper-cli"

## ENTERTAINMENT ##

_title_ "Entertainment:"

check "term-img (display images in iTerm)" "command -v term-img"
  successfully "npm install -g term-img-cli"

check "splash (beautiful wallpapers from unsplash)" "command -v splash"
  successfully "npm install -g splash-cli"

check "mplayer (command line music player)" "command -v mplayer"
  successfully "brew install mplayer"

check "youtube-dl (youtube downloader)" "command -v youtube-dl"
  successfully "brew install youtube-dl"

check "open-pip-cli (play movies in macos native picture-in-picture)" "command -v open-pip"
  successfully "npm install -g open-pip-cli"

check "mapscii (google maps in your terminal)" "command -v mapscii"
  successfully "npm install -g mapscii"

check "asciinema (record and share what happens in terminal)" "command -v asciinema"
  successfully "pip3 install asciinema"

check "cowsay (talk like a cow)" "command -v cowsay"
  successfully "brew install cowsay"

check "lolcat (talk in rainbows)" "command -v lolcat"
  successfully "gem install lolcat"

check "artii (asci art titles)" "command -v artii"
  successfully "gem install artii"

check "cat-names (get popular cat names)" "command -v cat-names"
  successfully "npm install -g cat-names"

check "dog-names (get popular dog names)" "command -v dog-names"
  successfully "npm install -g dog-names"

check "pokemon (get pokemon names)" "command -v pokemon"
  successfully "npm install -g pokemon-cli"

check "superheroes (get superheroes names)" "command -v superheroes"
  successfully "npm install -g superheroes-cli"

check "supervillains (get supervillains names)" "command -v supervillains"
  successfully "npm install -g supervillains-cli"

check "tetris (well... play tetris in the terminal)" "command -v tetris"
  successfully "brew install vitetris"

check "ohshit (helps you unfuck your git mistake)" "command -v ohshit"
  successfully "npm install -g ohshitgit"

_title_ "Done... Have fun!"

trap finish EXIT

if [[ $bootstrapping -ne 1 ]]; then
  _title_ "Done... Have fun!"
fi