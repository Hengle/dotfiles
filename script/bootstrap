#!/usr/bin/env bash
#
# bootstrap installs things.

set +e
proceed=1
result=0
bootstrapping="1"

DOTFILES_ROOT="$HOME/.dotfiles"
LOGFILE=/tmp/dotfiles-setup

. $DOTFILES_ROOT/script/shared-functions
trap exit_warning EXIT

header "Let's install our dotfiles..."

update_path() {
  # We need /usr/local/bin to come before /usr/bin on the path, to
  # pick up brew files we install.  To do this, we just source
  # .profile.khan, which does this for us (and the new user).
  # (This assumes you're running mac-setup.sh from the khan-dotfiles
  # directory.)
  export PATH="/usr/local/bin:/usr/local/sbin:$DOTFILES/bin:$PATH"
}

install_zsh() {
  _title_ 'Checking ZSH environment:'
  check "zsh" "command -v zsh"
  if [[ $proceed -ne 0 ]]; then
    if [ "$(uname)" == "Darwin" ]; then
      eval "brew install zsh"   
    elif [ "$(expr substr $(uname -s) 1 5)" == "Linux" ]; then
      eval "sudo apt-get -y install zsh"
    fi
  fi

  check "oh-my-zsh" "ls ~/.oh-my-zsh"
  if [[ $proceed -ne 0 ]]; then
    notice "\n\n(please provide password when asked)...\n"
    curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -o /tmp/omz.sh
    sed -i''  '/echo/d' /tmp/omz.sh
    sed -i''  '/env zsh/d' /tmp/omz.sh
    sh /tmp/omz.sh
    rm -rf /tmp/omz.sh
    echo ''
    success "oh-my-zsh : ${BOLD}installed${NORMAL}"
  fi
}

install_dotfiles () {
  _title_ 'Installing dotfiles:'

  for source in `find $DOTFILES_ROOT -maxdepth 2 -name \*.symlink`
  do
    info "$source"
    dest="$HOME/.`basename \"${source%.*}\"`"

    if [ -f $dest ] || [ -d $dest ]; then
      if [[ "$(readlink $dest)" -ef "$source" ]]; then
        success "${BOLD}~/`basename $source`${NORMAL} symlinked"
      else
        info "File already exists: `basename $source`. I'll back it up at ${BOLD}${source/$HOME/'~'}.backup${NORMAL}"
        if [ -f $dest\.backup ] || [ -d $dest\.backup ]; then
          rm -rf $dest\.backup
        fi
        mv $dest $dest\.backup
        success "moved ${dest/$HOME/'~'} to ${dest/$HOME/'~'}.backup"
        link_files $source $dest
      fi
    else
      link_files $source $dest
    fi


  done

  info "Fix OSX zsh environment bug"
  if [[ -f /etc/{zshenv} ]]; then
    successfully "sudo mv /etc/{zshenv,zprofile}"
  else
    success "Fix OSX zsh environment bug : not needed"
  fi 
}

install_zshplugins () {
  _title_ 'Installing ZSH plugins'

  declare -a plugins=("jocelynmallon/zshmarks" 
                      "iam4x/zsh-iterm-touchbar"
                      "zsh-users/zsh-autosuggestions"
                      "amstrad/oh-my-matrix"
                      "vasyharan/zsh-brew-services"
                      "horosgrisa/zsh-dropbox"
                      "zsh-users/zsh-completions"
                      "g-plane/zsh-yarn-autocompletions"
                      "peterhurford/git-it-on.zsh")

  declare -a rename=("git-it-on.zsh/git-it-on")

  for plugin in "${plugins[@]}"
  do
    source="git://github.com/${plugin}.git"
    directory=${plugin#*/}
    for gsub in "${rename[@]}"
    do
      IFS='/' read -ra replacements <<< "$gsub"
      pattern=$replacements[0]
      result=$replacements[1]
      directory=${directory/$pattern/$result}
    done
    target=${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/${directory}

    if [ ! -d ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/${directory} ] 
    then
      info "Cloning plugin ${source} into ${target/$HOME/'~'}}"
      eval $(echo "git clone ${source} ${target}") &> /dev/null
      success "pluging ${BOLD}`basename $target`${NORMAL} : installed"
    else
      success "skipping plugin ${BOLD}`basename $target`${NORMAL}: already installed"
    fi
  done

  target=${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/themes/spaceship-prompt
  if [[ ! -d "$target" ]]; then
    info "Installing ${BOLD}spaceship-prompt${NORMAL} theme"
    eval $(echo "git clone git://github.com/denysdovhan/spaceship-prompt.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/themes/spaceship-prompt") &> /dev/null
    eval $(echo "ln -s ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/themes/spaceship-prompt/spaceship.zsh-theme ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/themes/spaceship.zsh-theme") &> /dev/null
    success "Installed spaceship-prompt theme. Enjoy! (See https://git.io/fpxOn for all customization options: put this in your ~/.localrc)"
  else
    success "skipping theme ${BOLD}`basename $target`${NORMAL}: already installed"
  fi

  echo ''
  echo '  To complete the iTerm TouchBar integration:'
  echo '    Menu -> go into View -> Customize Tool Bar... and drag & drop the Fn module on the Touchbar'
  echo ''
}

install_homebrew() {
  check "homebrew" "command -v brew"
  successfully 'echo | ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"'

  if [[ $proceed -ne 0 ]]; then
    info "brew doctor"
    if ! brew doctor; then
      warn "brew doctor : ${BOLD}Oh no! 'brew doctor' reported some warnings.${NORMAL}"
      notice "These warnings may cause you trouble, but they are likely harmless.\n"
      read -r -p "I'll wait while you read this. Ready to continue? [Y/n] " response
      case "$response" in
        [nN][oO]|[nN])
          exit 1
          ;;
      esac
    else
      success "brew doctor : ${BOLD}all good!${NORMAL}"
    fi
  fi

  # info "Fixing Homebrew permissions ...\n"
  # successfully "sudo chown -R $(whoami) $(brew --prefix)/*; sudo chown -R +rw $(brew --prefix)/*"
  #successfully "sudo chgrp -R staff /usr/local/*; sudo chmod -R g+rwxXs /usr/local/*"

  info "updating (but not upgrading) Homebrew"
  successfully "brew update > /dev/null"
}

install_1password_cli() {
  check "1password-cli" "brew cask ls 1password-cli"
  successfully "brew cask install 1password-cli"
}

setup_macos() {
  continue=1
  user 'Want to setup macOS (install default apps and plugins)? [Y/n]'
  read -n 1 response
  case "$response" in
    [nN][oO]|[nN])
      continue=0
      ;;
  esac

  if [[ $continue -ne 0 ]]; then
    success "Ok, let's do this... You may be asked for your password."  
    bootstrapping=1 $HOME/.dotfiles/script/setup-osx
  else
    success "Ok, skipping macOS setup."  
  fi
}

setup_development() {
  continue=1
  user 'Want to setup macOS to do development (node, ruby, etc)? [Y/n]'
  read -n 1 response
  case "$response" in
    [nN][oO]|[nN])
      continue=0
      ;;
  esac

  if [[ $continue -ne 0 ]]; then
    success "Ok, let's go for it... You may be asked for your password."  
    bootstrapping=1 $HOME/.dotfiles/script/setup-dev
  else
    success "Ok, skipping development environment setup."  
  fi
}

setup_cli_tools() {
  continue=1
  user 'Want to install other convenient cli tools and apps? [Y/n]'
  read -n 1 response
  case "$response" in
    [nN][oO]|[nN])
      continue=0
      ;;
  esac

  if [[ $continue -ne 0 ]]; then
    success "Ok, let's continue... You may be asked for your password."  
    bootstrapping=1 $HOME/.dotfiles/script/setup-cli-apps
  else
    success "Ok, skipping cli tools installation."  
  fi
}

install_zsh
install_dotfiles
install_zshplugins

_title_ 'macOS setup essential tools'
install_homebrew
install_1password_cli

_title_ 'macOS apps and tools'
setup_macos

_title_ 'Development apps and tools'
setup_development

_title_ 'Other convenient cli tools'
setup_cli_tools

_title_ '.dotfiles ready & installed!'
echo ''

trap - EXIT

env zsh -l