#!/usr/bin/env bash
#
# bootstrap installs things.

DOTFILES_ROOT="`pwd`"

set -e

echo ''
echo "\033[1;30m=================================================================
\033[0;37m               _                   _       _    __ _ _           
              (_)                 | |     | |  / _(_) |          
 _______ _ __  _  ___  _   _    __| | ___ | |_| |_ _| | ___  ___ 
|_  / _ \ '_ \| |/ _ \| | | |  / _\` |/ _ \| __|  _| | |/ _ \/ __|
 / /  __/ | | | | (_) | |_| | | (_| | (_) | |_| | | | |  __/\__ \\
/___\___|_| |_| |\___/ \__, |  \__,_|\___/ \__|_| |_|_|\___||___/
             _/ |       __/ |                                    
            |__/       |___/

\033[1;30m*****************************************************************
\033[1;37m         Let's bootstrap your development machine ...
\033[1;30m=================================================================
\033[1;37m"

info () {
  printf "  [ \033[00;34m..\033[0m ] $1"
}

user () {
  printf "\r  [ \033[0;33m?\033[0m ] $1 "
}

success () {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail () {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo ''
  exit
}

title () {
  echo ''
  printf "  $1\n"
  echo ''
}

setup_gitconfig () {
  title 'Checking Git Config'

  if ! [ -f git/gitconfig.symlink ]
  then
    info 'setup gitconfig'

    git_credential='cache'
    if [ "$(uname -s)" == "Darwin" ]
    then
      git_credential='osxkeychain'
    fi

    user ' - What is your github author name?'
    read -e git_authorname
    user ' - What is your github author email?'
    read -e git_authoremail

    sed -e "s/AUTHORNAME/$git_authorname/g" -e "s/AUTHOREMAIL/$git_authoremail/g" -e "s/GIT_CREDENTIAL_HELPER/$git_credential/g" git/gitconfig.symlink.example > git/gitconfig.symlink

    success 'gitconfig'
  else
    success 'Git already configured!'
  fi
}

link_files () {
  ln -s $1 $2
  success "linked $1 to $2"
}

install_zshplugins () {
  title 'Installing ZSH plugins'

  declare -a plugins=("jocelynmallon/zshmarks" 
                      "iam4x/zsh-iterm-touchbar"
                      "zsh-users/zsh-autosuggestions"
                      "amstrad/oh-my-matrix"
                      "vasyharan/zsh-brew-services"
                      "horosgrisa/zsh-dropbox"
                      "zsh-users/zsh-completions"
                      "g-plane/zsh-yarn-autocompletions"
                      "peterhurford/git-it-on.zsh")

  declare -A rename=(["git-it-on.zsh"]="git-it-on")

  for plugin in "${plugins[@]}"
  do
    source="git://github.com/${plugin}.git"
    directory=${plugin#*/}
    directory=${rename[$directory]:-$directory}
    target=${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/${directory}

    if [ ! -d ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/${directory} ] 
    then
      info "Cloning plugin ${source} into ${target}"
      eval $(echo "git clone ${source} ${target}") &> /dev/null
      success "Cloned plugin ${source} into ${target}"
    else
      success "skipping plugin ${target}: already installed"
    fi
  done

  if [ ! -d ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/themes/spaceship-prompt ] 
  then
    info "Installing spaceship-prompt theme"
    eval $(echo "git clone git://github.com/denysdovhan/spaceship-prompt.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/themes/spaceship-prompt") &> /dev/null
    eval $(echo "ln -s ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/themes/spaceship-prompt/spaceship.zsh-theme ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/themes/spaceship.zsh-theme") &> /dev/null
    success "Installed spaceship-prompt theme. Enjoy! (See https://git.io/fpxOn for all customization options: put this in your ~/.localrc)"
  else
    success "skipping theme ${target}: already installed"
  fi

  echo ''
  echo '  To complete the iTerm TouchBar integration:'
  echo '    Menu -> go into View -> Customize Tool Bar... and drag & drop the Fn module on the Touchbar'
  echo ''
}

install_dotfiles () {
  title 'Installing dotfiles'

  overwrite_all=false
  backup_all=false
  skip_all=false

  for source in `find $DOTFILES_ROOT -maxdepth 2 -name \*.symlink`
  do
    dest="$HOME/.`basename \"${source%.*}\"`"

    if [ -f $dest ] || [ -d $dest ]
    then

      overwrite=false
      backup=false
      skip=false

      if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
      then
        user "File already exists: `basename $source`, what do you want to do? [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            skip=true;;
        esac
      fi

      if [ "$overwrite" == "true" ] || [ "$overwrite_all" == "true" ]
      then
        rm -rf $dest
        success "removed $dest"
      fi

      if [ "$backup" == "true" ] || [ "$backup_all" == "true" ]
      then
        mv $dest $dest\.backup
        success "moved $dest to $dest.backup"
      fi

      if [ "$skip" == "false" ] && [ "$skip_all" == "false" ]
      then
        link_files $source $dest
      else
        success "skipped $source"
      fi

    else
      link_files $source $dest
    fi

  done
}

setup_macos() {
  title 'macOS defaults setup'
  user 'Want to setup macOS with some nice defaults? [Y/n]'
  read -n 1 action
  continue=false
  case "$action" in
    n )
      continue=false;;
    N )
      continue=false;;
    * )
      continue=true;;
  esac

  if [ "$continue" == "true" ]
  then
    success "Fine, let's continue the setup... You will be asked for your password.\n"  
    $HOME/.dotfiles/osx/set-defaults.sh
  else
    success "Ok, skipping macOS setup.\n"  
  fi
}

setup_gitconfig
install_dotfiles
install_zshplugins
setup_macos

title '.dotfiles ready & installed!'
echo '  Want to set up your laptop with the some developer essentials?'
echo '   => run `script/setup`'
echo ''
echo '  Want to reload your ZSH environment?'
echo '   => run `reload!`'
