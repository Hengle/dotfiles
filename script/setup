set +e

alias BEGINCOMMENT="if [ ]; then"
alias ENDCOMMENT="fi"

proceed=1

echo "\n(please type your password if asked)\n"
sudo -v

# Keep-alive: update existing `sudo` time stamp until `.osx` has finished
while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &

message=""

success () {
  printf "\r\033[2K [ \033[00;32mok\033[0m ] $*\n"
}


info () {
  proceed=1
  printf "\r\033[2K [ \033[00;34m..\033[0m ] $1"
  message="$1"
}

user () {
  printf "\r\033[2K [ \033[00;33m?\033[0m ] $*"
}

fail () {
  printf "\r\033[2K [\033[0;31mFAIL\033[0m] $*\n"
  echo ''
  echo 'See /tmp/dotfiles-setup for more information.'
  exit 1
}

successfully() {
  if [ $proceed -ne 0 ]; then
    $* >> /tmp/dotfiles-setup 2>&1
    status=$?
    if [ $status -ne 0 ]; then
      fail "$message : failed" 2>&1
      exit 1
    else
      success "$message : installed"
    fi
  fi
}

check() {
  printf " [ \033[00;34m..\033[0m ] $1 : checking"
  echo "\n\nChecking $1, running $2:\n" >> /tmp/dotfiles-setup 2>&1
  eval "$2" > /dev/null 2>&1
  status=$?
  if [ $status -ne 0 ]; then
    proceed=1
    info "$1 : installing"
    message="$1"
  else
    proceed=0
    success "$1 : found"
  fi
}

echo "\nGeneric stuff first :\n"

info "Fix OSX zsh environment bug"
  if [[ -f /etc/{zshenv} ]]; then
    successfully sudo mv /etc/{zshenv,zprofile}
  else
    success $message
  fi

info "Installing Oh-My-Zsh Prose Theme..."
  successfully sudo cp -f $HOME/.dotfiles/zsh/prose.zsh-theme $HOME/.oh-my-zsh/themes/prose.zsh-theme

info "Checking for SSH key, generating one if it doesn't exist ..."
  [[ -f ~/.ssh/id_rsa.pub ]] || ssh-keygen -t rsa

info "Copying public key to clipboard. Paste it into your Github account ..."
  [[ -f ~/.ssh/id_rsa.pub ]] && cat ~/.ssh/id_rsa.pub | pbcopy
  successfully open https://github.com/account/ssh

info "Fixing permissions ..."
  successfully sudo mkdir -p /usr/local
  successfully sudo chown -R `whoami` /usr/local

info "Symlinking Sublime Text"
  successfully sudo mkdir -p /usr/local/bin && sudo ln -f -s "/Applications/Sublime Text.app/Contents/SharedSupport/bin/subl" /usr/local/bin/subl

echo "\nHomebrew, the best OS X package manager :\n"

check "brew core", "which brew"
  successfully exec bash -c 'ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"'

check "brew package 'grc'" "brew list grc"
  successfully brew install grc

check "brew package 'coreutils'" "brew list coreutils"
  successfully brew install coreutils

check "brew package 'spark'" "brew list spark"
  successfully brew install spark

check "brew package 'icu4c'" "brew list icu4c"
  successfully brew install icu4c

check "Tapping homebrew/dupes collection" "ls /usr/local/Library/Taps/homebrew-dupes > /dev/null"
  successfully brew tap homebrew/dupes

echo "\nSystem libraries needed for c-compilation :\n"

check "brew package 'autoconf'" "brew list autoconf"
  successfully brew install autoconf

check "brew package 'automake'" "brew list automake"
  successfully brew install automake

BEGINCOMMENT
check "brew package 'apple-gcc42'" "brew list apple-gcc42"
  successfully brew install apple-gcc42
ENDCOMMENT

echo "\nSystem libraries recommended for Ruby :\n"

check "brew package 'gdbm'" "brew list gdbm"
  successfully brew install gdbm

check "brew package 'libffi'" "brew list libffi"
  successfully brew install libffi

check "brew package 'libksba'" "brew list libksba"
  successfully brew install libksba

check "brew package 'libyaml'" "brew list libyaml"
  successfully brew install libyaml

check "brew package 'readline'" "brew list readline"
  successfully brew install readline

echo "\nInstalling node.js and coffeescript :\n"

check "brew package 'node'" "brew list node"
  successfully brew install node

info "installing coffeescript and jslint"
  successfully npm install -g coffee
  successfully npm install -g coffee-script
  successfully npm install -g jslint
  successfully npm install -g ios-sim

echo "\nInstalling support programs recommended for Ruby :\n"

check "brew package 'imagemagick' (for cropping and re-sizing images)" "brew list imagemagick"
  successfully brew install imagemagick

BEGINCOMMENT
info "Installing QT, used by Capybara Webkit for headless Javascript integration testing ..."
  successfully brew install qt
ENDCOMMENT

check "brew package 'watch' (used to execute a program periodically and show the output)" "brew list watch"
  successfully brew install watch

echo "\nOur most used databases :\n"

check "brew package 'mongodb' (nosql)" "brew list mongodb"
  successfully brew install mongodb
  successfully ln -sfv /usr/local/opt/mongodb/*.plist ~/Library/LaunchAgents
  successfully launchctl load ~/Library/LaunchAgents/homebrew.mxcl.mongodb.plist

check "brew package 'redis' (a good key-value database)" "brew list redis"
  successfully brew install redis
  successfully ln -sfv /usr/local/opt/redis/*.plist ~/Library/LaunchAgents
  successfully launchctl load ~/Library/LaunchAgents/homebrew.mxcl.redis.plist

echo "\nInstalling various other software :\n"

check "brew package 'dnsmasq' (to use .dev domains for web development)" "brew list dnsmasq"
  successfully brew install dnsmasq
  successfully ln -sf $HOME/.dotfiles/etc/dnsmasq.conf /usr/local/etc/dnsmasq.conf
  successfully sudo cp -fv /usr/local/opt/dnsmasq/*.plist /Library/LaunchDaemons
  successfully sudo launchctl load /Library/LaunchDaemons/homebrew.mxcl.dnsmasq.plist

echo "\nSetting up Ruby :\n"

check "rbenv (for changing Ruby versions)" "which rbenv"
  successfully git clone git://github.com/sstephenson/rbenv.git /usr/local/rbenv
  successfully chgrp -R staff /usr/local/rbenv
  successfully chmod -R g+rwxXs /usr/local/rbenv

successfully cd /usr/local/rbenv && git pull

check "ruby-build (for installing Rubies)" "ls /usr/local/rbenv/plugins/ruby-build > /dev/null"
  successfully mkdir /usr/local/rbenv/plugins
  successfully git clone git://github.com/sstephenson/ruby-build.git /usr/local/rbenv/plugins/ruby-build
  successfully chgrp -R staff /usr/local/rbenv/plugins/ruby-build
  successfully chmod -R g+rwxs /usr/local/rbenv/plugins/ruby-build

successfully cd /usr/local/rbenv/plugins/ruby-build && git pull

check "rbenv-sudo (for running Ruby as root)" "ls /usr/local/rbenv/plugins/rbenv-sudo > /dev/null"
  successfully git clone git://github.com/dcarley/rbenv-sudo.git /usr/local/rbenv/plugins/rbenv-sudo
  successfully chgrp -R staff /usr/local/rbenv/plugins/rbenv-sudo
  successfully chmod -R g+rwxs /usr/local/rbenv/plugins/rbenv-sudo

successfully cd /usr/local/rbenv/plugins/rbenv-sudo && git pull

info "rbenv-binstubs (automatically detect binstubs)", "ls /usr/local/rbenv/plugins/rbenv-binstubs > /dev/null"
  successfully git clone git://github.com/ianheggie/rbenv-binstubs.git /usr/local/rbenv/plugins/rbenv-binstubs
  successfully chgrp -R staff /usr/local/rbenv/plugins/rbenv-binstubs
  successfully chmod -R g+rwxs /usr/local/rbenv/plugins/rbenv-binstubs

successfully cd /usr/local/rbenv/plugins/rbenv-binstubs && git pull

export RBENV_ROOT=/usr/local/rbenv
export PATH="$RBENV_ROOT/bin:$RBENV_ROOT/shims:$PATH"
eval "$(rbenv init -)"

check "OpenSSL 1.0.1e" "brew list openssl"
  successfully brew install openssl

check "Check for Ruby 2.2.2" "ruby -v "
  rbenv install 2.2.2

info "Setting Ruby 2.2.2-p95 as global default Ruby ..."
  successfully rbenv global 2.2.2
  successfully rbenv shell 2.2.2

info "Update to latest Rubygems version ..."
  successfully gem update --system

echo "\nInstalling necessary Rubygems for Rails & Web development :\n"

info "gem 'bundler'"
  successfully gem install bundler --no-document

info "gem 'foreman'"
  successfully gem install foreman --no-document

info "gem 'rails'"
  successfully gem install rails --no-document

info "gem 'ghost' (for easy hosts management)"
  successfully gem install ghost --pre --no-document

info "gem 'lunchy' (osx launch management)"
  successfully gem install lunchy --no-document

info "the Nimbu gem"
  successfully gem install nimbu --no-document

info "the GitHub CLI client"
  successfully gem install hub --no-document

info "the Git-Smart gem"
  successfully gem install git-smart --no-document
