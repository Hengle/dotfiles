#!/usr/bin/env bash

set +e
proceed=1
result=0

DOTFILES_ROOT="$HOME/.dotfiles"
LOGFILE=/tmp/dotfiles-setup

. $DOTFILES_ROOT/script/shared-functions

# ensure we capture unexpected exits
trap exit_warning EXIT

mac_apps=(
  # Browsers
  "google-chrome|Google Chrome|Google Chrome Browser|https://www.google.com/chrome/"
  "firefox|Firefox|Firefox Browser|https://www.mozilla.org/nl/firefox/new/"
  # Tools
  "iterm2|iTerm2|Terminal Emulator|https://www.iterm2.com/"
  "nightowl|NightOwl|Easily and automatically toggle MacOS dark mode|https://nightowl.kramser.xyz/"
  "gfxcardstatus|gfxCardStatus|menu bar app that allows MacBook Pro users to switch between graphics cards|https://gfx.io/"
  "alfred|Alfred for Mac|MacOS productivity app, using hotkeys, keywords, clipboard memory, etc.|https://www.alfredapp.com/"
  "the-unarchiver|The Unarchiver|Open any archive in seconds|https://theunarchiver.com/"
  "numi|Numi|Beautiful calculator app for Mac|https://numi.io/"
  # Zenjoy Essentials
  "slack|Slack|Where work happens|https://slack.com/"
  "front|FrontApp|The shared inbox for teams|https://frontapp.com/"
  "harvest|Harvest|Our time tracking tool|https://www.getharvest.com/"
  "dropbox|Dropbox|File-sharing made easy|https://www.dropbox.com/"
  # Development
  "visual-studio-code|Visual Studio Code|Code editing. Redefined.|https://code.visualstudio.com/"
  "dash|Dash|Offline access to 200+ API documentation|https://kapeli.com/dash"
  "table-tool|Table Tool|A simple CSV editor for macOS|https://github.com/jakob/TableTool"
  "staruml|StarUML|A sophisticated software modeler|http://staruml.io/"
  "switchhosts|SwitchHosts!|an App for hosts management & switching|https://oldj.github.io/SwitchHosts/"
  "crunch|Crunch|The best png size crusher|https://github.com/chrissimpkins/Crunch"
  "imageoptim|ImageOptim|ImageOptim makes images load faster|https://imageoptim.com/mac"
  "imagealpha|ImageAlpha|Reduces file sizes of 24-bit PNG files|https://pngmini.com/"
  "github|Github Desktop|Github from your desktop|https://desktop.github.com/"
  "pine|Pin|A lightweight macOS markdown editor|https://github.com/lukakerr/Pine|lukakerr/casks"
  "insomnia|Insomnia|A Cross-platform HTTP and GraphQL Client|https://insomnia.rest"
  # Entertainment
  "vlc|VLC Media Player|Free and open source media player|https://www.videolan.org/vlc"
  "motrix|Motrix|A full-featured download manager.|https://motrix.app"
  "iina|IINA|The modern media player for macOS|https://iina.io"
  "aerial|Aerial Screensaver|Apple TV Aerial Screensaver for Mac|https://github.com/JohnCoates/Aerial"
  "fliqlo|Fliqlo|The Flip Clock Screensaver|https://fliqlo.com/"
  "brooklyn|Brooklyn|Screensaver with very nice visuals|https://github.com/pedrommcarrasco/Brooklyn"
)

function usage() {
  printf "This script sets up your macOS system and installs various recommended apps.\n\n"
  printf "Usage: setup-osx [options]\n\n"
  printf "Options\n"
  printf "  -a --apps               Only install macOS apps, skip rest of the setup\n"
  printf "  -d --defaults           Only setup macOS defaults, skip rest of the setup\n"
  printf "  -i --iterm              Only setup iTerms, skip rest of the setup\n"
  printf "  -l --list               Show list of apps that can be installed\n"
  printf "  -q --quicklook          Only install quicklook plugins, skip rest of the setup\n"
  printf "  -s --single-app <app>   Install app <app> only (use code as reference)\n"
  printf "\n"
}

setup_macos_defaults() {
  # Ask for the administrator password upfront
  user_ask_yn "Would you like to hide icons on your desktop?" "y"
  if [[ "$user_ask_yn_result" == "y" ]]; then
    hide_desktop_icons=1
  else
    hide_desktop_icons=0
  fi

  info "default settings for macOS : ${BOLD}installing${NORMAL}"
  hide_desktop_icons=$hide_desktop_icons $HOME/.dotfiles/osx/set-defaults.sh
  success "MacOS defaults : installed"

  if command -v bioutil >/dev/null 2>&1; then
    nb_fingerprints=$(bioutil -c | grep 'fingerprint' | sed -E 's/User[^:]+://' | sed -E 's/fingerprint\(s\)//' | awk '{$1=$1};1')
    if (( $nb_fingerprints > 0 )); then
      info "setup TouchID support for sudo"
      . $DOTFILES_ROOT/osx/enable-touchid-sudo.zsh
      output=$(enable-touchid-sudo 2>&1)
      success "TouchID support for sudo : done"
    fi
  fi
}

quicklook_plugins() {
  _title_ "macOS useful quicklook plugins"
  plugins=("qlcolorcode" "qlstephen" "qlmarkdown" "quicklook-json" "webpquicklook" "suspicious-package" "quicklookase" "qlvideo")
  for plugin in "${plugins[@]}"; do
    check "quicklook plugin ${BOLD}$plugin${NORMAL}" "brew cask ls $plugin"
    successfully "brew cask install $app"
  done
}

choose_mac_apps_loop() {
  user "Would you like to install [a]ll, [n]one, or [s]ome of the apps? [a/n/s]?"
  read -n 1 input
  case "$input" in
    [aA][lL][lL] | [aA])
      chosen_apps=("${mac_apps[@]}")
      ;;
    [sS][oO][mM][eE] | [sS])
      echo ''
      for app in "${mac_apps[@]}"; do
        IFS='|' read -r -a app_info <<< "$app"
        app_name="${app_info[1]}"
        user_ask_yn "Would you like to install ${BOLD}${app_name}${NORMAL}?" "y"
        if [[ "$user_ask_yn_result" == "y" ]]; then
          chosen_apps=("${chosen_apps[@]}" "${app}")
        fi
      done
      ;;
    [nN][oO][nN][eE] | [nN])
      ;;
    *)
      info_no_spinner "Please choose ${BOLD}[a]${NORMAL}ll, ${BOLD}[n]${NORMAL}one, or ${BOLD}[s]${NORMAL}ome.\n"
      choose_mac_apps_loop
      ;;
  esac
}

show_possible_apps() {
  notice_left "${WHITE}We recommend installing following MacOS apps:\n${NORMAL}${DIM}(note: you can CMD-click on a title to go the site for the app)${NORMAL}:\n"
  for app in "${mac_apps[@]}"; do
    IFS='|' read -r -a app_info <<< "$app"
    app_code="${app_info[0]}"
    app_name="${app_info[1]}"
    app_description="${app_info[2]}"
    app_link="${app_info[3]}"

    printf " - \e]8;;%s\e\\${BOLD}%s\e]8;;\e\\${NORMAL} ${DIM}(%s)${NORMAL}\n   %s\n\n" "${app_link}" "${app_name}" "${app_code}" "${app_description}"
  done
  echo ""
}

install_mac_apps() {
  chosen_apps=() # When the user opts to install a package it will be added to this array.

  if [[ -z "$1" ]]; then
    show_possible_apps
    choose_mac_apps_loop

    echo ""
  else
    IFS=',' read -r -a given_appnames <<< "$1"
    for selected in "${given_appnames[@]}"; do
      for app in "${mac_apps[@]}"; do
        IFS='|' read -r -a app_info <<< "$app"
        app_code="${app_info[0]}"
        if [[ "$app_code" == "$selected" ]]; then
          chosen_apps=("${chosen_apps[@]}" "${app}")
        fi
      done
    done
  fi

  if [ ${#chosen_apps[@]} -ne 0 ]; then
    _title_ "Installing Selected Apps"
  fi

  for app in "${chosen_apps[@]}"; do
    IFS='|' read -r -a app_info <<< "$app"
    app_code="${app_info[0]}"
    app_name="${app_info[1]}"
    app_description="${app_info[2]}"
    app_cask_tap="${app_info[4]}"

    if [[ -n "$app_cask_tap" ]]; then
      # we need to install a specific tap first
      brew tap "$app_cask_tap" > /dev/null
    fi

    # get executable name from cask to check if it is already installed
    executable=$(brew cask info $app_code | grep '(App)' | sed -E 's/(.*).app \(App\)/\1/')
    # check sudo or keep it alive before spinner starts
    sudo -v
    if [[ $app_description == *"Screensaver"* ]]; then
      check "$app_name" "brew cask ls $app_code"
    else
      check "$app_name" "open -R -g -a '$executable' > /dev/null"
    fi
    successfully "brew cask install $app_code" "perhaps it is already installed."
  done
}

setup_iterm() {
  _title_ "Setup iTerm2 Profile"

  if ! open -R -g -a iTerm > /dev/null; then
    warn "iTerm2 not found, skipping setup..."
  else
    check "Fura Code Nerd font" "brew cask ls font-firacode-nerd-font"
    successfully "brew cask install font-firacode-nerd-font"

    user_ask_yn "iTerm profile: would you like a larger font size?" "y"
    if [[ "$user_ask_yn_result" == "y" ]]; then
      font_size=14
    else
      font_size=12
    fi

    source_json="$HOME/.dotfiles/osx/iterm.profile.json"
    source_plist="$HOME/.dotfiles/osx/iterm.profile.plist"
    destination="$HOME/Library/Application Support/iTerm2/DynamicProfiles/zenjoy.profile.plist"

    info "iTerm profile: ${BOLD}generating${NORMAL}"
    plutil -convert xml1 "$source_json" -o "$source_plist"

    sed -i "" "s/FuraCodeNerdFontComplete-Medium 12/FuraCodeNerdFontComplete-Medium $font_size/g" "$source_plist"
    success "iTerm profile: generated"

    if [[ -f "$destination" ]] || [[ -d "$destination" ]]; then
      if [[ "$(readlink "$destination")" -ef "$source_plist" ]]; then
        success "iTerm profile: already linked"
      else
        link_files "$source_plist" "$destination"
      fi
    else
      link_files "$source_plist" "$destination"
    fi
    # dynamically load the profile on the fly
    echo -e "\033]50;SetProfile=Zenjoy\a"
  fi

  echo ''
  echo '  To setup the iTerm Profile, open iTerm:'
  echo '    Menu -> go into Iterm2 -> Preferences... go to Profiles and set the Zenjoy profile as default'
  echo '     (select Zenjoy dynamic profile -> click Other Actions -> Set as default)'
  echo ''
  echo '  The iTerm profile should automatically be loaded after restarting iTerm'
  echo ''
  echo '  To complete the iTerm TouchBar integration:'
  echo '    Menu -> go into View -> Customize Tool Bar... and drag & drop the Fn module on the Touchbar'
  echo ''
}

setup_vscode() {
  user_ask_yn "Want to setup Visual Studio Code?" "y"
  if [[ "$user_ask_yn_result" == "y" ]]; then
    bootstrapping=1 $HOME/.dotfiles/script/setup-vscode
  else
    success "Ok, skipping VSCode setup."
  fi
}

install_appstore_apps() {
  user_ask_yn "Want to install useful apps from Mac App Store?" "y"
  if [[ "$user_ask_yn_result" == "y" ]]; then
    bootstrapping=1 $HOME/.dotfiles/script/setup-appstore-apps
  else
    success "No problem, skipping App Store apps installation."
  fi
}

while [[ "$1" == -* ]]; do
  case "$1" in
  -a|--apps)
    ask_sudo_password
    install_mac_apps
    trap finish EXIT
    exit
    ;;
  -d|--defaults)
    ask_sudo_password
    setup_macos_defaults
    trap finish EXIT
    exit
    ;;
  -i|--iterm)
    ask_sudo_password
    setup_iterm
    trap finish EXIT
    exit
    ;;
  -q|--quicklook_plugins)
    ask_sudo_password
    setup_iterm
    trap finish EXIT
    exit
    ;;
  -l|--list)
    show_possible_apps
    trap finish EXIT
    exit
    ;;
  -s|--single-app)
    shift
    install_mac_apps "$1"
    trap finish EXIT
    exit
    ;;
  -h|--help)
    usage
    trap finish EXIT
    exit 0
    ;;
  --)
    shift
    break
    ;;
  esac
  shift
done

if [[ $bootstrapping -ne 1 ]]; then
  header "Let's setup OSX with some apps ..."

  ask_sudo_password

  notice_left "\nFeel free to follow the details by running:"
  notice_left "${BOLD} tail -f $LOGFILE ${NORMAL}in another terminal\n"
fi

setup_macos_defaults
quicklook_plugins
install_mac_apps
install_appstore_apps
setup_iterm
setup_vscode

trap finish EXIT

if [[ $bootstrapping -ne 1 ]]; then
  _title_ "Done... Have fun!"
fi